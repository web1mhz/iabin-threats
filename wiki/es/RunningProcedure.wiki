#summary Pasos para utilizar la herramienta de filtrado de datos.
#labels Featured
#sidebar TableOfContents

[http://code.google.com/p/iabin-threats/wiki/HowToBuildITA?wl=en http://iabin-threats.googlecode.com/svn/wiki/resources/gb.gif]
[http://code.google.com/p/iabin-threats/wiki/HowToBuildITA?wl=es http://iabin-threats.googlecode.com/svn/wiki/resources/es.gif]

= Introducción =

Pasos para utilizar la herramienta de filtrado de datos.
  
===1 Configurando archivos===
====Descripción====
En primer lugar, se deben establecer los valores para los parámetros de los archivos de configuración XML _server_config.xml_ and _client_config.xml_.
 
Si no hay archivos de configuración, los puede generar con los valores por defecto, mediante el script descrito en la sección de Procedimiento técnico. A continuación, puede editar los parámetros para establecer los valores correspondientes.  

La mayoría de los parámetros corresponden a las rutas de archivos y rutas de directorios. Los ejemplos para la configuración correcta de estos archivos se encuentran en el código fuente del proyecto.

Por favor, configure los archivos, incluso si sólo quiere que se ejecute en modo local.

*Outputs:* Configuración de archivos: _server_config.xml_ y _client_config.xml_.

====Procedimiento Técnico====
Ejecute el script en java con los siguientes parámetros para la parte del servidor: 

 {{{java -cp ita.jar org.ciat.ita.server.ServerConfig}}}

y para la parte del cliente: 

 {{{java -cp ita.jar org.ciat.ita.client.ClientConfig}}}

A continuación edite los archivos server_config.xml and client_config.xml 
  
   
===2 Filtrado Básico===
====Descripción====
Primero procesamos un filtrado basico de los registros lo cual excluye a los que no tienen valores latitud o longitud, la geospatial_issue es diferente de cero, la base de registro no especie y opcionalmente auqellos een los que la especie tiene menos de diez registros 

*Inputs:* Tabla MySQL con los registros de ocurrencias de la base de datos. 

*Outputs:* Varias tablas temporales (temp_land_1A, temp_land_2A, temp_land_3A, temp_land_4A y temp_land_5A ). La tabla temp_land_4A table contiene todos los registros que pasaron los filtros, y la tabla temp_land_5A está vacía y preparada para ser llenada en el siguiente paso.

====Procedimiento Técnico====
Ejecute en la base de datos la consulta sql del arhivo llamado “QUERY_basic_filter.sql” 

Ejemplo de la línea de comando: 

 {{{mysql –u User –p portal < QUERY_basic_filter.sql }}}

====Finalizar====
Una vez que la consulta se ha ejecutado, las tablas temp_land_1A, temp_land_2A and temp_land_3A ya no se necesitan, por lo que pueden ser borradas. Las tablas temp_land_4A and temp_land_5A se utilizarán en el siguiente paso. 

===3 Obteniendo el archivo JGM===
====Descripción====
Si no tiene el archivo jgm para el paso de filtrar las especies no terrestres, puede descargarlo de :: //TODO download URL

O puede crearlo usando un archivo de máscara ASCII y el script WorldMaskManager. 

====Procedimiento Técnico====
Ejecute el script en java con los siguientes parámetros: 

*Parámetros:
 {{{jgm}}} Para ejecutar el algoritmo de conversión 

 {{{-Xmx<BYTES>}}} Máximo tamaño de bytes de dinámico de Java

 {{{<MASK>}}} Ruta de acceso absoluta del archivo de máscara ascii

 {{{-k <KILOMETERS>}}} Distancia de la costa considerada como "cerca de tierra"

*Línea de comando:*

 {{{java -XmxBYTES -cp ita.jar org.ciat.ita.client.manage.WorldMaskManager jgm -m MASK -k KILOMETERS}}}

Por ejemplo, la creación de un archivo de JGM en sistema de archivos Linux con un radio de 5 kilómetros: 

 {{{java -Xmx1000m -cp ita.jar org.ciat.ita.client.manage.WorldMaskManager jgm -m /home/inland_mask/inland_msk.asc -k 5 }}}

  
===4 Filtrando especies no terrestres===
====Description====
Los registros de especies no terrestres que no son posibles de evaluar. En consecuencia, las especies no terrestres deben ser discriminadas y las terrestres almacenadas en la tabla _temp_land_5A_ .

Un método confiable para hacer esto, sería la de conocer el _nub_concept_id_ de todas las especies no terrestres y filtrar los registros de  _temp_land_4A_ e insertar sólo los terrestres que están en la tabla _temp_land_5A_ . Pero todos estos nub_concept_id son dificiles de conocer. Asi que en este paso las especies no terrestres se pueden determinar de la siguiente manera: 
  
Se determina para cada registro, si es terrestre o no, utilizando una máscara terrestre. Una vez que todos los registros se han evaluado, se dertermina el porcentaje de registros no terrestres para esa especie, si este porcentaje es igual o superior al 90%, entonces la especie se considera no terrestre. Sólo los registros de las especies terrestres se insertan en la tabla temp_land_5A table.


*Inputs:* _temp_land_4A_ tabla records, archivo de máscara terrestre “inland_msk.jgm” 

*Outputs:* _temp_land_5A_ Tabla llena con los registros de especies terrestres. 

====Procedimiento Técnico====
Ejecute el script en java con los siguientes parámetros: 

 {{{-Xmx<BYTES>}}} Máximo tamaño de bytes de dinámico de Java

 {{{terreval}}} cadena de caracteres para filtrar especies no-terrestres

 {{{-n <NUMBER>}}} de registros que deben ser analizados para mostrar las estadísticas de tiempo.

Línea de comando: 

 {{{java -XmxBYTES -cp ita.jar org.ciat.ita.client. manage.WorldMaskManager terreval -n NUMBER}}}

Ejemplo: 

 {{{java -Xmx1000m -cp ita.jar org.ciat.ita.client.manage.WorldMaskManager terreval -n 100000}}}

*Finalizar:* Una vez que el script se ha ejecutado, la tabla temp_land_4A no se necesita más. Por lo tanto se puede quitar. 
   

===5 Obteniendo el archivo EMM ===

Si no tiene el archivo Emm todo en uno (bioAIO.emm) requerido para el paso de evaluación geoespacial, lo puede descargar de:  //TODO download URI

O puede crearlo usando el archivo ASCII original de las variables bioclimáticas especificadas en el XML de configuración cliente y el script EnvironmentMaskManager.

====Procedimiento Técnico====
*Parametros:*

 {{{-d <VARS>}}} Ruta de acceso absoluta de la carpeta de variables ambientales.

*Línea de comando:*

 {{{java -XmxBYTES -cp ita.jar org.ciar.ita.client. manage.EnvironmentMaskManager -d VARS_FOLDER}}}

Example for Linux: 

 {{{java -Xmx1000m -cp ita.jar org.ciat.ita.client. manage.EnvironmentMaskManager -d /home/bio_asc}}}

===6 Geospatial evaluation===
====Description====
Evaluates the records using geospatial resources.

*Inputs:* _temp_land_5A_ table filled with the records of terrestrial species. Shape file _GADM_v0-6.shp_, land mask file _inland_msk.jgm_ (jgm format is necesary) and environmental variables file _BioAIO.emm_ and the format file _BioAIO.format_ 

*Outputs:* Two tables temp_good_records and temp_bad_records filled with the data according to the evaluation results. If the record passed all the filters, its data with the corresponding environmental data should be in the temp_good_records table. On the contrary, if the records were recognized as unreliable its data should be in the temp_bad_records table with the corresponding type of error found. 

Error possible values: 
*M:* Out of Mask 
*NC:* Null Country 
*WC:* Wrong Country 
*O:* In Ocean 
*NL:* Near Land 

====Technical procedure====
First, you should run  the sql file named “QUERY_create_GBtables.sql” into the database 

example: 

 {{{mysql portal < QUERY_create_GBtables.sql }}}

Once the tables are created, You have the choice to run the geospatial script in standalone mode or client-server mode.


===Standalone===

In standalone mode you just need to run a single instance.

*Parameters:*
 {{{-Xmx<BYTES>}}} of Maximum java heap size 

*Command line:*

 {{{java -XmxBYTES -cp ita.jar}}}

example 

 {{{java -Xmx1500m -jar ita.jar}}}

===Client-Server===

First of all you have to run one instance as a server, the you can run several client instances as you wish.

*Parameters:*
 {{{-Xmx<BYTES>}}} of Maximum java heap size 

*Server command line:*

 {{{java -XmxBYTES -cp ita.jar org.ciat.ita.server.Server }}}

example 

 {{{java -Xmx20000m -cp ita.jar org.ciat.ita.server.Server }}}

*Client command line:*

 {{{java -XmxBYTES -cp ita.jar org.ciat.ita.client.Client }}}

example 

 {{{java -Xmx1500m -cp ita.jar org.ciat.ita.client.Client }}}

*Finalize:* Once the script has been run, the table temp_land_5A is not needed anymore, so it can be dropped. 
  
  
  
===7 Environmental evaluation ===
====Description====
Within each specie calculate the maximum value and the minimum value of each environmental variable to determinate when the record is an outlier for that variable.
 
*Inputs:* _temp_good_records_ table filled with the geospatially reliable records data and the corresponding environmental data 

*Outputs:* _temp_good_records_ table with the count of the outlier for all variables 

====Technical procedure====
Run the script in java with the following parameters: 
  
 {{{-Xmx<BYTES>}}} of Maximum java heap size 

Run the script in java : 

Command line: 

 {{{java -XmxBYTES -cp ita.jar org.ciat.ita.server.OutliersManager }}}

example: 

 {{{java -Xmx2000m -cp ita.jar org.ciat.ita.server.OutliersManager }}}

	  
  
  
===8 (Optional) Getting geospatial and environmental statistics===

====Description==== 
This is an optional step. Its aim is to extract some statistics of the filtering steps. how many records are reliable and how many are not, specifying the error type. 

*Inputs:* _temp_good_records_ table with the count of the outlier for all variables 
*Outputs:* The XML file _statistics.xml_ is generated. It contains all the statistics of the set of records evaluated 

====Technical procedure====
Run the script with the following parameters: 
  
*Command line:*

 {{{java  -cp ita.jar org.ciat.ita.server.database.DataBaseStatistics}}}

	    
===10 Final filter for reliable data===
====Description==== 

Discriminate the records that are  considerated as outlier in more than 16  environmental variable distributions and then those for which the specie has less than ten records. Only the reliable records are then stored into the final table called filtered_records 

*Inputs:* 	temp_good_records table with the count of the outlier for all variables 

*Outputs:* 	filtered_records table filled with the totally reliable records 

====Technical procedure====
Run into the database the sql file named "QUERY_final_filter.sql"  

example: 

 {{{mysql -u User -p portal < QUERY_final_filter.sql}}}

  
*Finalize:* The tables temp_good_records and temp_bad_records are not needed anymore. The temporal tables temp_good_1A, temp_good_2A, temp_good_3A are useless, they were just for the query, so they can be dropped. 

  
===11 Exporting records into a comma separated file===
====Description====
Exporting the reliable records into a comma separated file to be run in Maxent 

*Inputs:* _filtered_records_ table filled with the reliable records 

*Outputs:* A comma separated file _filtered_records.csv_ with the reliable records 

====Technical procedure====
Run the script using java with the following parameters: 
  
*Parameters:* 
 {{{csv}}} To run the corresponding method to export a csv per specie. 
 {{{-Xmx<BYTES>}}} of Maximum java heap size 
 {{{-n <NUMBER>}}} of records that should be analized to show the time statistics 
 {{{-d <OUTPUT>}}} directory exactly location  

*Command line:*

 {{{java -XmxBYTES -cp ita.jar client.correctormanager.MaxentManager csv -n NUMBER -d OUTPUT}}}

example: 

 {{{java -Xmx1000m -cp ita.jar client.correctormanager.MaxentManager csv -n 1000 -d /home/output }}}
  

====12 Generate species projections with Maxent====
===Description===
This script generates the lambda files and immediately after generates the projections of the species data using maxent application and the environmental varibles. 

*Inputs:* Environmental variables preferably with a low resolution. Maxent runnable jar.

*Outputs:* Projection for species ascii files 

====Technical procedure====
Run the script in java with the following parameters: 

*Parameters:*
 {{{-Xmx<BYTES>}}} of Maximum java heap size 
 {{{maxent}}} to Run the corresponding script to generate species projections  
 {{{-i <INSTANCES>}}} of Maxent  that will be executed at same time 

*Command line:*

 {{{java -XmxBYTES  -cp ita.jar client.correctormanager.MaxentManager maxent -i INSTANCES }}}

example: 

 {{{java -Xmx1000m -cp ita.jar client.correctormanager.MaxentManager maxent -i 4}}}   
 